// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
)

const setEmployee = `-- name: SetEmployee :exec
INSERT INTO employees (id, name, role_id) VALUES (?, ?, ?)
`

type SetEmployeeParams struct {
	ID     string
	Name   string
	RoleID sql.NullInt64
}

func (q *Queries) SetEmployee(ctx context.Context, arg SetEmployeeParams) error {
	_, err := q.db.ExecContext(ctx, setEmployee, arg.ID, arg.Name, arg.RoleID)
	return err
}

const setRole = `-- name: SetRole :exec
INSERT INTO roles (name) VALUES (?)
`

func (q *Queries) SetRole(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, setRole, name)
	return err
}

const setSchedule = `-- name: SetSchedule :exec
INSERT INTO schedules (employee_id, day_of_week, clock_in, clock_out) VALUES (?, ?, ?, ?)
`

type SetScheduleParams struct {
	EmployeeID sql.NullInt64
	DayOfWeek  sql.NullInt64
	ClockIn    sql.NullString
	ClockOut   sql.NullString
}

func (q *Queries) SetSchedule(ctx context.Context, arg SetScheduleParams) error {
	_, err := q.db.ExecContext(ctx, setSchedule,
		arg.EmployeeID,
		arg.DayOfWeek,
		arg.ClockIn,
		arg.ClockOut,
	)
	return err
}

const viewAll = `-- name: ViewAll :many
SELECT id, name, role_id FROM employees
`

func (q *Queries) ViewAll(ctx context.Context) ([]Employee, error) {
	rows, err := q.db.QueryContext(ctx, viewAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Employee
	for rows.Next() {
		var i Employee
		if err := rows.Scan(&i.ID, &i.Name, &i.RoleID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
