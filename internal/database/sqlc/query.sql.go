// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package sqlc

import (
	"context"
)

const getSchedulesByUserID = `-- name: GetSchedulesByUserID :many
SELECT id, week_start_date, day_of_week, clock_in, clock_out
FROM schedules
WHERE user_id = ?
`

type GetSchedulesByUserIDRow struct {
	ID            int64  `json:"id"`
	WeekStartDate string `json:"week_start_date"`
	DayOfWeek     int64  `json:"day_of_week"`
	ClockIn       int64  `json:"clock_in"`
	ClockOut      int64  `json:"clock_out"`
}

func (q *Queries) GetSchedulesByUserID(ctx context.Context, userID string) ([]GetSchedulesByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getSchedulesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSchedulesByUserIDRow
	for rows.Next() {
		var i GetSchedulesByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.WeekStartDate,
			&i.DayOfWeek,
			&i.ClockIn,
			&i.ClockOut,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsers = `-- name: GetUsers :many
SELECT id, name, role
FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Name, &i.Role); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
