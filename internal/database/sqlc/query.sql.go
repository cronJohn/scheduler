// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package sqlc

import (
	"context"
)

const createSchedule = `-- name: CreateSchedule :exec
INSERT INTO schedules (userId, day, clockIn, clockOut)
VALUES (?, ?, ?, ?)
`

type CreateScheduleParams struct {
	Userid   string `json:"userid"`
	Day      string `json:"day"`
	Clockin  string `json:"clockin"`
	Clockout string `json:"clockout"`
}

func (q *Queries) CreateSchedule(ctx context.Context, arg CreateScheduleParams) error {
	_, err := q.db.ExecContext(ctx, createSchedule,
		arg.Userid,
		arg.Day,
		arg.Clockin,
		arg.Clockout,
	)
	return err
}

const deleteSchedule = `-- name: DeleteSchedule :exec
DELETE FROM schedules
WHERE id = ?
`

func (q *Queries) DeleteSchedule(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSchedule, id)
	return err
}

const getAllSchedules = `-- name: GetAllSchedules :many
SELECT users.name, users.role, schedules.id, schedules.userId as "userId", schedules.day, schedules.clockIn as "clockIn", schedules.clockOut as "clockOut"
FROM schedules
JOIN users ON schedules.userId= users.id
`

type GetAllSchedulesRow struct {
	Name     string `json:"name"`
	Role     string `json:"role"`
	ID       int64  `json:"id"`
	UserId   string `json:"userId"`
	Day      string `json:"day"`
	ClockIn  string `json:"clockIn"`
	ClockOut string `json:"clockOut"`
}

func (q *Queries) GetAllSchedules(ctx context.Context) ([]GetAllSchedulesRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllSchedules)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllSchedulesRow
	for rows.Next() {
		var i GetAllSchedulesRow
		if err := rows.Scan(
			&i.Name,
			&i.Role,
			&i.ID,
			&i.UserId,
			&i.Day,
			&i.ClockIn,
			&i.ClockOut,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSchedulesByUserID = `-- name: GetSchedulesByUserID :many
SELECT id, day, clockIn, clockOut
FROM schedules
WHERE userId = ?
`

type GetSchedulesByUserIDRow struct {
	ID       int64  `json:"id"`
	Day      string `json:"day"`
	Clockin  string `json:"clockin"`
	Clockout string `json:"clockout"`
}

func (q *Queries) GetSchedulesByUserID(ctx context.Context, userid string) ([]GetSchedulesByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getSchedulesByUserID, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSchedulesByUserIDRow
	for rows.Next() {
		var i GetSchedulesByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Day,
			&i.Clockin,
			&i.Clockout,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsers = `-- name: GetUsers :many
SELECT id, name, role
FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Name, &i.Role); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateScheduleTimes = `-- name: UpdateScheduleTimes :exec
UPDATE schedules
SET clockIn = ?, clockOut = ?, day = ?
WHERE id = ?
`

type UpdateScheduleTimesParams struct {
	Clockin  string `json:"clockin"`
	Clockout string `json:"clockout"`
	Day      string `json:"day"`
	ID       int64  `json:"id"`
}

func (q *Queries) UpdateScheduleTimes(ctx context.Context, arg UpdateScheduleTimesParams) error {
	_, err := q.db.ExecContext(ctx, updateScheduleTimes,
		arg.Clockin,
		arg.Clockout,
		arg.Day,
		arg.ID,
	)
	return err
}
